<?xml version="1.0" encoding="UTF-8"?>

<!--

This is A DTD description of a rules file.  However, since NanoXML that JOGRE
uses doesn't support DTD descriptions, it is given in a comment.

<!DOCTYPE rules [
<!ELEMENT rules (section+)>
<!ATTLIST rules content (text | text/html | text/rtf) "text"
				title CDATA #REQUIRED>
	<!ELEMENT section (section+ | CDATA)>
	<!ATTLIST title CDATA #IMPLIED>
]>

Notes: The "rules" element *must* have a title even though that title is never
       shown to the users.  If the title isn't there, then nothing will display
       in the rules window.

       Sections are not required to have a title, but only sections with titles
       will show up in the index'd tree list.

       NanoXML doesn't support mixing elements and CDATA inside of an element,
       and so non-title'd sections allow that functionality.

       You can embed sections within sections and they will show up in the
       tree as subsections.

       The <![CDATA[ ... ]]> verbiage is needed for text that uses HTML tags within
       it.  Without them, NanoXML would try to parse them as XML and fail.  For plain
       text rules files, you don't need them.
-->

<rules content="text/html" title="Rules">
	<section title="Introduction">
		<![CDATA[<font size="+2"><b><u>Introduction</u></b></font><br>
		The game of Camelot was created by George S. Parker in 1887 as <b><u>Chivalry</u></b>.<br>
		It was published as <b><u>Camelot</u></b> in 1930 by Parker Brothers.<br><br>
		The World Camelot Federation is at http://communities.msn.com/worldcamelotfederation<br>
		Camelot Information is also available at http://www.abstractstrategy.com/camelot.html<br><br>
		The program was written by Richard Walter (rwalter42@yahoo.com)<br>]]>
	</section>

	<section title="Players">
		<![CDATA[<font size="+2"><b><u>Players</u></b></font><br>
		Camelot is a two player game.<br>
		One player is RED and the other is BLUE.<br>]]>
	</section>

	<section title="Goal">
		<![CDATA[<font size="+2"><b><u>Goal</u></b></font><br>
		There are three ways to win Camelot.<br>
		A) A player wins if he captures all of the opponent's pieces and still has at least 2 pieces of his own on the board.<br>
		B) A player wins if he gets two of his pieces into the opponent's castle.<br>
		C) A player wins if his opponent has no move left.<br><br>
		If both players are reduced to 1 piece, then the game is a tie.<br>]]>
	</section>

	<section title="Board">
		<![CDATA[<font size="+2"><b><u>Board</u></b></font><br>
		The board is a 12x16 array of squares with some of the squares removed.<br>
		The two squares at the end of the board are the players' castles.<br>]]>
	</section>

	<section title="Pieces">
		<![CDATA[<font size="+2"><b><u>Pieces</u></b></font><br>
		There are two types of pieces: Men and Knights.<br>
		Each player starts the game with 10 men and 4 knights.<br>]]>
	</section>

	<section title="Moves">
		<![CDATA[<font size="+2"><b><u>Moves</u></b></font><br>
		There are four types of moves:<br><br>
		1) Walk - A man or knight may move to an adjacent square horizontally, vertically, or diagonally.<br>
		2) Jump - A man or knight may jump over a friendly piece and land on an empty square.  The friendly piece jumped over is *NOT* removed from the board.  Jumps can be made horizontally, vertically, or diagonally.  A piece may make as many jumps in one turn as it is possible to do, but is not forced to jump farther than the player wishes.  Each jump of a move may change direction.<br>
		3) Capture - A man or knight man jump over an opponent's piece and land on an empty square.  The piece jump over is *IMMEDIATELY* removed from the board.  Captures can be made horizontally, vertically, or diagonally.  After jumping, if the piece lands such that it can make another capture, then it must continue to capture.  Each capture of a move may change direction.<br>
		4) Knight's Charge - A knight may combine jumps and captures.  In this case, zero or more jumps are done followed by zreo or more captures.  Once a knight has captured a piece, it cannot go back to jumps again.<br><br>
		If a player can make a capture, then he must capture.<br><br>
		If a player has a choice of captures, then he can choose which one to make.<br><br>
		A knight's move only changes from a jump to a Knight's charge when the knight lands in a position where it is possible to make a capture.  A knight may stop a jumping move up to that point, but once it reaches a square where it can capture, it must either take that capture, or continue jumping to a point where it can make some other capture.<br><br>
		A player cannot move or jump into his own castle.<br><br>
		A player may make capture that results in his piece landing in his castle.  In this case, the player *MUST* move the piece out of his castle on his next turn.  This overrides the requirement to make a capture.<br><br>
		Once a piece has been moved into the opponent's castle, it cannot leave the castle for any reason.  It is possible for a piece to walk from one square of the castle to the other square of the castle.  This is called a "Castle Move".  Each player, however, may only make 2 castle moves each game.<br>]]>
	</section>

	<section title="Interface Details">
		<![CDATA[<font size="+2"><b><u>Interface Details</u></b></font><br>
		When it is your turn, moving the mouse over a piece that can move will outline the piece in yellow.  If a piece does not highlight that means that that piece cannot move.  (This is usually because there is another piece that you can use to make a capture and this one can't make a capture.)<br><br>
		Clicking on a piece will select it for moving.  All of the spaces that the selected piece can legally reach will be outlined in green.<br><br>
		Clicking on a different piece will unselect the currently selected piece and select the new one.<br><br>
		Moving the mouse over a green square will show the path that the selected piece takes to get from its current square to the chosen ending square.<br><br>
		In the case of captures, there may be multiple paths for a piece from its starting square to the ending square.  By moving the mouse out of the green square and back in again, an alternate path will be shown.  By repeatedly moving out and back in, you can cycle around all possible moves.<br><br>
		Clicking on a green square will make the move that is currently shown.<br><br>
		When your opponent makes a move, his selected path is shown before the pieces are actually moved, to allow you to see his complete move.  Clicking in the window will cause the move to take effect before showing your legal moves.<br>]]>
	</section>

	<section title="Customization">
		<![CDATA[<font size="+2"><b><u>Customization</u></b></font><br>
		You can change your local image of the board and pieces.<br><br>
		Using a drawing program create a picture that includes two rows of square pictures.<br>
		Each row shows (in this order):<br>
		&nbsp;&nbsp;&nbsp;&nbsp 1) an empty square<br>
		&nbsp;&nbsp;&nbsp;&nbsp 2) a Red man<br>
		&nbsp;&nbsp;&nbsp;&nbsp 3) a Red knight<br>
		&nbsp;&nbsp;&nbsp;&nbsp 4) a Blue man<br>
		&nbsp;&nbsp;&nbsp;&nbsp 5) a Blue knight<br>
		&nbsp;&nbsp;&nbsp;&nbsp 6) a Red castle square<br>
		&nbsp;&nbsp;&nbsp;&nbsp 7) a Blue castle square<br><br>
		The top row is the images for the light squares and the second row is the images for the dark squares.  (Use the pieces.gif file as a reference)<br><br>
		Place this picture in the camelot/images directory.<br><br>
		Then, use a text editor to edit the game.properties file in the camelot directory.  Change
		the line for image.1 and point it to your new picture.  (The number after the comma should
		be set to the size of the image file.)<br><br>
		Then, when you restart the client, you should see your new images being used.<br>]]>
	</section>
</rules>
